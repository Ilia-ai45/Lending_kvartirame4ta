// File path: /api/sendMessage.ts
import { GoogleSpreadsheet } from 'google-spreadsheet';

// Helper to format numbers as RUB currency
const formatCurrency = (value: number) => new Intl.NumberFormat('ru-RU', { style: 'currency', currency: 'RUB', minimumFractionDigits: 0 }).format(value);

export default async function handler(request, response) {
    if (request.method !== 'POST') {
        return response.status(405).json({ message: 'Method Not Allowed' });
    }

    const formData = request.body;
    if (!formData.name || !formData.phone) {
        return response.status(400).json({ message: '–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è.' });
    }

    // --- Task 1: Send notification to Telegram ---
    const sendTelegramMessage = async () => {
        const { TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID } = process.env;
        if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
            throw new Error("Telegram environment variables are not set.");
        }

        let message = `*–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞!*\n\n*–ò–º—è:* ${formData.name}\n*–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.phone}`;

        if (formData.propertyPrice) {
            message += `\n\n*--- –†–∞—Å—á–µ—Ç –ø–æ –∏–ø–æ—Ç–µ–∫–µ ---*\n`;
            message += `–°—Ç–æ–∏–º–æ—Å—Ç—å: *${formatCurrency(formData.propertyPrice)}*\n`;
            message += `–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å: *${formatCurrency(formData.downPayment)}*\n`;
            message += `–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂: *${formatCurrency(formData.monthlyPayment)}*\n`;
            message += `–°—Ç–∞–≤–∫–∞: *${formData.interestRate}%*\n`;
            if (formData.quickDealDiscount) {
                message += `*üî• –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —Å–∫–∏–¥–∫–∞ –∑–∞ –±—ã—Å—Ç—Ä—É—é —Å–¥–µ–ª–∫—É! (-100 000 —Ä—É–±)*\n`;
            }
            message += `\n*--- –ü–æ–∂–µ–ª–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ---*\n`;
            message += `–ö–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç: *${formData.rooms || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*\n`;
            message += `–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: *${formData.priority || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}*\n`;
        }

        const telegramApiUrl = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
        const telegramResponse = await fetch(telegramApiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                chat_id: TELEGRAM_CHAT_ID,
                text: message,
                parse_mode: 'Markdown',
            }),
        });

        if (!telegramResponse.ok) {
            const data = await telegramResponse.json();
            console.error('Telegram API Error:', data);
            throw new Error(`–û—à–∏–±–∫–∞ API Telegram: ${data.description || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
    };

    // --- Task 2: Add data to Google Sheet (optional) ---
    const appendToGoogleSheet = async () => {
        const { GOOGLE_SHEET_ID, GOOGLE_SERVICE_ACCOUNT_EMAIL, GOOGLE_PRIVATE_KEY } = process.env;
        if (!GOOGLE_SHEET_ID || !GOOGLE_SERVICE_ACCOUNT_EMAIL || !GOOGLE_PRIVATE_KEY) {
            console.log("Google Sheets env variables not found. Skipping.");
            return; // Gracefully skip if not configured
        }
        
        try {
            const doc = new GoogleSpreadsheet(GOOGLE_SHEET_ID);
            await doc.useServiceAccountAuth({
                client_email: GOOGLE_SERVICE_ACCOUNT_EMAIL,
                private_key: GOOGLE_PRIVATE_KEY.replace(/\\n/g, '\n'),
            });

            await doc.loadInfo();
            const sheet = doc.sheetsByIndex[0];

            const headerValues = [ '–î–∞—Ç–∞', '–ò–º—è', '–¢–µ–ª–µ—Ñ–æ–Ω', '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å', '–ü–ª–∞—Ç–µ–∂/–º–µ—Å', '–°—Ç–∞–≤–∫–∞ %', '–°–∫–∏–¥–∫–∞ –∑–∞ —Å–¥–µ–ª–∫—É', '–ö–æ–º–Ω–∞—Ç—ã', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç' ];
            
            await sheet.loadHeaderRow();
            if (JSON.stringify(sheet.headerValues) !== JSON.stringify(headerValues)) {
                 await sheet.setHeaderRow(headerValues);
            }

            await sheet.addRow({
                '–î–∞—Ç–∞': new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' }),
                '–ò–º—è': formData.name,
                '–¢–µ–ª–µ—Ñ–æ–Ω': formData.phone,
                '–°—Ç–æ–∏–º–æ—Å—Ç—å': formData.propertyPrice ? formatCurrency(formData.propertyPrice) : '',
                '–ü–µ—Ä–≤—ã–π –≤–∑–Ω–æ—Å': formData.downPayment ? formatCurrency(formData.downPayment) : '',
                '–ü–ª–∞—Ç–µ–∂/–º–µ—Å': formData.monthlyPayment ? formatCurrency(formData.monthlyPayment) : '',
                '–°—Ç–∞–≤–∫–∞ %': formData.interestRate || '',
                '–°–∫–∏–¥–∫–∞ –∑–∞ —Å–¥–µ–ª–∫—É': formData.quickDealDiscount ? '–î–∞' : '',
                '–ö–æ–º–Ω–∞—Ç—ã': formData.rooms || '',
                '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç': formData.priority || '',
            });
        } catch (error) {
             // Log the error but don't fail the entire request, as Telegram is primary.
             console.error("Could not append to Google Sheet:", error);
        }
    };

    // --- Execute tasks and respond ---
    try {
        // We run them sequentially to ensure Telegram is attempted first, but can be parallel
        await sendTelegramMessage();
        await appendToGoogleSheet();

        return response.status(200).json({ success: true });

    } catch (error) {
        console.error('Error sending message:', error);
        return response.status(500).json({ message: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.' });
    }
}
